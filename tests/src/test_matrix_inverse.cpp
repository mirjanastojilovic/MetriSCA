/**
 * MetriSCA - A side-channel analysis library
 * Copyright 2021, School of Computer and Communication Sciences, EPFL.
 *
 * All rights reserved. Use of this source code is governed by a
 * BSD-style license that can be found in the LICENSE.md file.
 */

#include <catch2/catch.hpp>
#include <metrisca/core/matrix.hpp>

using namespace metrisca;

static Matrix<double> Initialize(std::initializer_list<std::initializer_list<double>> data)
{
    auto it0 = data.begin();
    
    if (it0 == data.end()) {
        return Matrix<double>(0, 0);
    }

    Matrix<double> result(it0->size(), data.size());

    for (size_t i = 0; it0 != data.end(); it0++, i++) {
        size_t j = 0;
        for (auto it1 = it0->begin(); it1 != it0->end(); it1++, j++) {
            result(i, j) = *it1;
        }
    }

    return result;
}

static void AssertEquals(const Matrix<double>& A, const Matrix<double>& B)
{
    REQUIRE(A.GetWidth() == B.GetWidth());
    REQUIRE(A.GetHeight() == B.GetHeight());

    for (size_t i = 0; i != A.GetHeight(); ++i) {
        for (size_t j = 0; j != A.GetWidth(); ++j) {
            REQUIRE_THAT(A(i, j), Catch::Matchers::WithinRel(B(i, j), 0.001));
        }
    }
}

TEST_CASE("Transpose work as intended")
{
    Matrix<double> A = Initialize({
        { 1.0, 0.0, 0.0, 1.0, 0.0 },
        { 0.5, 0.2, 0.3, 0.7, 0.6 }
    });

    Matrix<double> E = Initialize({
        { 1.0, 0.5 },
        { 0.0, 0.2 },
        { 0.0, 0.3 },
        { 1.0, 0.7 },
        { 0.0, 0.6 }
    });

    AssertEquals(Transpose(A), E);
}

TEST_CASE("Multiplication work as intended")
{
    Matrix<double> X = Initialize({{ -0.5687091861281258, 0.9705880429050576, 1.3546220545784882, -0.6712940496595755, -0.6341315078761521 },
        { 0.9991771360636046, 0.6392137415928257, -0.37816272909830223, -1.1933162582071823, -1.2247658495932343 },
        { 2.8008408263116547, -1.6186488328840944, -0.4750862043205751, -1.0935844783736695, -0.5863904359073236 },
        { -1.542077941048934, 0.8118460491654323, 0.477300939601047, -0.6642733441126976, 0.07579524267489605 },
        { 2.863724473631121, -2.903237842094391, 0.562156573575478, -0.47814126470642104, -0.952253992382259 },
        { -1.683827266349801, 0.964801588595578, 0.5553541452409354, 0.3495708495000585, -2.9346155040844395 },
        { -0.12438684398748329, -0.09881036098031327, -0.17603578172637843, -0.6327741621571604, 0.6725920120596601 },
        { 0.5693554275718267, -1.8861652243483207, 1.1742781029487168, -0.9940271518849527, -0.41451803356303873 },
        { 0.020491866271717066, 0.6919140670418931, -1.3618805112068202, 0.5158421978320527, 0.8256662840256195 },
        { 0.196795787185211, -1.1334180733784995, -1.5300645334838439, -0.03504070509367661, -0.3460061792133165 }}
    );

    Matrix<double> Y = Initialize({{ -1.2124667062890764, 0.9231692407263697, 0.49813380761354464, 1.1692128951577327, -0.21220906619816762, -2.1366212039580423, 0.30238281427634545, 1.8179775215609002, 0.634019597485794, 1.1412586083435923 },
        { -0.5288863104415534, 0.31741234921386374, 0.9972148489626492, 0.9135832257456252, 0.14165480135453948, -1.4170963664690681, -1.3527473856616643, 0.09739150927182948, 0.929120921342932, -0.5363886509825334 },
        { 1.4624222645497955, -0.7547663673891019, -0.993061883626624, 1.744341099339221, 0.5782787674925594, 1.0251965185486356, -0.08747980778485223, -0.7739107821952087, 1.478190548647322, 0.8131899134891709 },
        { 1.0438637750134852, -0.7445503481626553, 1.287245676647168, 0.4405056497758323, 0.40586890500274964, 1.0487298337215394, -0.06786527511696774, 1.2534421656368773, 0.8768353547807666, -0.39256334232626555 },
        { -1.9400570787688185, -0.5631488757341118, -0.17316178528328713, -0.2798712180497106, -1.553167601884576, 0.842470254112232, 0.2417448327269452, 0.19725510263082835, -0.29488447139372514, 1.4945312597958755 }}
    );

    Matrix<double> Expected = Initialize(
        {{ 2.6867514573398745, -0.38243869993241214, -1.4149450119972042, 2.4664601009413234, 1.753978006378523, -0.009789898327680761, -1.711170858690044, -2.954244039196131, 2.141991583758784, -0.7522955994575261 },
        { -0.972117960932687, 2.9889379894955024, 0.18668778494043972, 0.9096951098549184, 1.0777664461255392, -5.711676796929913, -0.7445751998771097, 0.43405554959863774, -0.016769280348307807, -0.872064235083523 },
        { -3.2385439909592892, 3.5749038778960824, -1.0533286222105733, 0.6496800617060596, -0.6314747675527697, -5.818502409132437, 3.0105691118710434, 3.815483944388665, -1.216376558994091, 3.231295599159829 },
        { 1.2979014436833474, -1.0742587127116032, -1.3007734211076953, -0.5425819038748946, 0.3309271996781552, 2.000911565815353, -1.54287048115495, -3.911461685453143, -0.12267194193441656, -1.433190698589156 },
        { 0.23373521287736335, 2.1901429395758143, -2.4774814505046945, 1.7324315616589367, 0.5910647124904472, -2.7318923454902078, 4.546357823866511, 3.70121759090461, -0.1892732970213237, 4.047181466587954 },
        { 8.401702342558327, -0.2750279069128332, 0.529988973855217, 0.8567034045488273, 5.514971362681562, 0.6941104612082534, -2.5960273841141714, -3.5376922382921787, 1.8216457254177731, -6.510685903329028 },
        { -2.019761212026686, 0.07903493770171857, -0.9166850645329301, -1.0097523784472935, -1.3908701796640182, 0.12834972275729997, 0.3169916259477425, -0.7599933968103358, -1.1840605960724353, 1.0215064047971323 },
        { 1.7910926189972012, 0.014152291433471513, -3.9712060781209813, 0.6690074454441616, 0.5314246187183745, 1.2685617870157204, 2.5881950833943126, -1.3851289372121316, -0.4050494979481224, 2.38711897428889 },
        { -3.445804699994322, 0.4173976087891645, 2.5736680901661755, -1.7233525345645448, -1.766916007906478, -1.1839090385932656, -0.6460587267068868, 1.968059568388697, -1.148422308953037, -0.42373249498176724 },
        { -1.2420654622655323, 1.197698733928297, 0.5020271212020776, -3.392928475639752, -0.5639361398744016, -0.711180397709494, 1.645318592053887, 1.3193454788862389, -3.1187300708686876, -0.9150469226347773 }}
    );

    AssertEquals(X * Y, Expected);
}

TEST_CASE("Test CholeskyInverse")
{
    Matrix<double> X = Initialize({{ 0.35947369440894816, 0.5966889460261919, 0.3560632665684721, 0.33031195391104623 },
        { 0.5966889460261919, 1.6183112388689438, 0.46619255468736187, 0.7521592013864434 },
        { 0.3560632665684721, 0.46619255468736187, 0.622613448601838, 0.5871178134673415 },
        { 0.33031195391104623, 0.7521592013864434, 0.5871178134673415, 1.4919008671307965 }});

    Matrix<double> Expected = Initialize({{ 16.320843486034605, -4.649125967641374, -7.40235125217013, 1.6435176822603488 },
        { -4.649125967641374, 2.1826157059532916, 1.7355753435188714, -0.7540714195919357 },
        { -7.402351252170123, 1.735575343518869, 6.073374023885809, -1.626200499920646 },
        { 1.6435176822603488, -0.7540714195919356, -1.6262004999206463, 1.326548931775131 }});

    AssertEquals(X.CholeskyInverse(), Expected);
}

TEST_CASE("Test Inverse")
{
    Matrix<double> X = Initialize({{ 0.35947369440894816, 0.5966889460261919, 0.3560632665684721, 0.33031195391104623 },
        { 0.5966889460261919, 1.6183112388689438, 0.46619255468736187, 0.7521592013864434 },
        { 0.3560632665684721, 0.46619255468736187, 0.622613448601838, 0.5871178134673415 },
        { 0.33031195391104623, 0.7521592013864434, 0.5871178134673415, 1.4919008671307965 }});

    Matrix<double> Expected = Initialize({{ 16.320843486034605, -4.649125967641374, -7.40235125217013, 1.6435176822603488 },
        { -4.649125967641374, 2.1826157059532916, 1.7355753435188714, -0.7540714195919357 },
        { -7.402351252170123, 1.735575343518869, 6.073374023885809, -1.626200499920646 },
        { 1.6435176822603488, -0.7540714195919356, -1.6262004999206463, 1.326548931775131 }});

    AssertEquals(X.Inverse(), Expected);
}
